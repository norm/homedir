# ~/etc/bash/rc/git
# -*- Mode: Bash; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
#
# git-related commands

diff_and_warn_ignore_replacements           \
        ${HOME}/.gitconfig                  \
        ${HOME}/share/examples/gitconfig

function git-start {
    if [ "$1" = '-p' ]; then
        cd ${HOME}/Projects
        shift
    fi
    
    local   repo=${1}
    local  start=${2:-README.markdown}
    local server=${3}
    local   user=${4}
    
    # chained so any failure stops the whole operation
    mkdir ${repo}                              \
        && cd ${repo}                          \
        && git init                            \
        && touch ${start}                      \
        && ${VISUAL} ${start}                  \
        && git add ${start}                    \
        && git commit -m 'started project'     \
        && git-push-first $repo $server $user
}

function git-push-first {
    local   repo=${1}
    local server=${2:-${GIT_SERVER}}
    local   user=${3}
    
    local git_repo=git@${server}:${user:+${user}/}${repo}.git
    
    echo "Push to ${git_repo}"                  \
        && git remote add origin ${git_repo}    \
        && git push origin master
}

function git_status_prompt {
    local  clean='nothing to commit (working directory clean)'
    local  dirty=''
    local branch=$(   git branch --no-color 2>/dev/null   \
              | sed -e '/^[^*]/d'                   \
                    -e 's/^* //' )
    
    # if we have a branch, check to see if it is dirty
    if [ "$branch" != "" ]; then
        [ "$branch" = "master" ] && branch=''   # most common, so don't care
        
        status=$( git status 2>/dev/null | tail -n1 )
        if [ "$status" != "$clean" ]; then
            dirty='*'
        fi
        
        # prepend a colon separator
        branch=":$branch"
    fi
    
    echo "${branch}${dirty}"
}

GIT_STATUS='$(git_status_prompt)'
