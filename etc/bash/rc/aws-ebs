# github:norm:homedir:etc/bash/rc/aws-ebs
# -*- Mode: Bash; tab-width: 4; indent-tabs-mode: nil; -*-
#
#       Working with Elastic Block Storage volumes.

# mount a block store (by name or volume ID) on the given
# running instance  (either instance or common AMI name)
function ebs-mount {
    if [ -z "$*" ]; then
        echo "Usage: ebs-mount volume [instance] [/dev/sd*] [/mnt]"
        return 1
    fi
    
    local volume=$( ebs-name-to-volume $1 )
    local   name=${2:-$ami_instance}
    local device=${3:-/dev/sdh}
    local  mount=${4:-/mnt}
    
    local instance=$( ec2-ami-name-to-instance $name )
    local  ip_addr=$( ec2-instance-ip $instance )
    
    if [ -n "${ip_addr}" ]; then
        if [ -n "${volume}" ]; then
            ebs-attach ${volume} ${instance} ${device}
            status_then_run \
                ssh ${ip_addr} "sudo mount ${device} ${mount}"
        else
            echo "Error: no volume found for $2"
        fi
    else
        echo "Error: no IP address found for $1"
    fi
}

# unmount a block store (by name or volume ID) from the given
# running instance  (either instance or common AMI name)
function ebs-umount {
    if [ -z "$*" ]; then
        echo "Usage: ebs-umount volume [instance] [/dev/sd*] [/mnt]"
        return 1
    fi
    
    local volume=$( ebs-name-to-volume $1 )
    local   name=${2:-$ami_instance}
    local  mount=${3:-/mnt}
    
    local instance=$( ec2-ami-name-to-instance $2 )
    local  ip_addr=$( ec2-instance-ip $instance )
    
    status_then_run \
        ssh ${ip_addr} "sudo umount ${mount}"
    ebs-detach ${volume} ${instance}
}

# attach a volume to an instance by name
function ebs-attach {
    local   volume=$( ebs-name-to-volume $1 )
    local     name=${2:-$ami_instance}
    local   device=${3:-/dev/sdh}
    
    local instance=$( ec2-ami-name-to-instance $name )
    
    if [ -n "$instance" ]; then
        status_then_run \
            ec2-attach-volume ${volume} -i ${instance} -d ${device}
    fi
}

# detach a volume from an instance by name
function ebs-detach {
    local   volume=$( ebs-name-to-volume $1 )
    local instance=$( ec2-ami-name-to-instance $2 )
    
    status_then_run \
        ec2-detach-volume $volume -i $instance
}

# create a volume and assign the a name
function ebs-create {
    local size=${1:-100}
    local name=$2
    
    local output="/tmp/ec2-run-output.$$"
    
    # create the volume, saving the output
    ec2-create-volume -s ${size} -z ${EC2_AVAIL_ZONE}   \
        | tee ${output}
    
    # if a name argument was given, register the volume under that name
    if [ -n "${name}" ]; then
        local volume=$( cat ${output} | awk -F\t '{ print $2 }' )
        ebs-name-volume ${volume} ${name}
    fi
    
    rm -f ${output}
}

# delete a named volume (removing the name from our file)
function ebs-delete {
    local   name=$1
    local volume=$( ebs-name-to-volume $name )
    
    local temp_file=/tmp/ebs-delete.$$
    
    grep -v '^${name}=' ${VOLUMES_LIST} > ${temp_file}      \
        && mv ${temp_file} ${VOLUMES_LIST}

    ec2-delete-volume $volume
}

# list the two most useful pieces of information about all created volumes:
# their size and name (or volume ID if they are not named in our file)
function ebs-list {
    local volumes=$( 
        ec2-describe-volumes \
            | awk -F\t '{ printf "%s:%s ", $3, $2 }' 
    )
    
    for i in $volumes; do
        local   size=$( echo $i | awk -F: '{ print $1 }' )
        local volume=$( echo $i | awk -F: '{ print $2 }' )
        local   name=$( ebs-volume-to-name $volume )
        
        printf '%-4s %s\n' $size ${name:-$volume}
    done
}

# store a name for a volume ID
# (NOTE: no uniqueness enforced, using the same name 
# more than once will give undefined results)
function ebs-name-volume {
    local volume=$1
    local   name=$2
    
    echo "${name}=${volume}" >> ${VOLUMES_LIST}
}

function ebs-name-to-volume {
    grep $1 ${VOLUMES_LIST}             \
        | awk -F= '{ print $2 }'
}

function ebs-volume-to-name {
    grep $1 ${VOLUMES_LIST}             \
        | awk -F= '{ print $1 }'
}
