# github:etc/bash/function/00.output
# -*- Mode: Bash; tab-width: 4; indent-tabs-mode: nil; -*-
#
#       Extensions to the standard "echo" command.

# Position of the spinner in 'status_line'.
status_counter=0

# Output a string, allowing it to contain ANSI sequences.
function print {
    # Protect any % characters from being interpreted by printf.
    local string=`echo "$@" | sed -e 's/%/%%/'`
    printf "${string}${reset}\n"
}

# Standard warning formatting.
function warn {
    $must_be_interactive
    
    local string="$@"
    print "${bold}${red}${string}"
}

# Standard debug formatting.
function debug {
    $must_be_interactive
    
    local string="$@"
    print "${bold}${yellow}${string}"
}
function debug_status {
    $must_be_interactive
    
    local string="$@"
    status_line $( print "${bold}${yellow}${string}" )
}

# A 'status' line is a temporary line, which will be
# overwritten by the next output.
function status_line {
    $must_be_interactive
    
    local    text="$*"
    local    char=$(( (( status_counter++ )) % 4 ))
    local spinner=( '/'  '-'  '\'  '|' )
    printf '\r%s %-77s\r' ${spinner[$char]} "$text"
}

# Like a normal echo, but padded to 79 chars to mask any 
# previous (longer) status line.
function clear_status_line {
    $must_be_interactive
    
    local text="$*"
    printf '\r%-79s\n' "$text"
}

# Clear any status text, but without creating a new line.
function empty_status_line {
    $must_be_interactive
    
    printf '\r%-79s\r' ''
}

# Run a program with an intermediate status line, for knowing what
# is happening when running lengthy, silent programs.
function status_then_run {
    if [ "$INTERACTIVE" -eq 1 ]; then
        local temp_file=$( mktemp /tmp/bash.status.XXXXX )
        
        status_line "$*"
        "$@" > ${temp_file}
        empty_status_line
        
        cat ${temp_file}
        rm ${temp_file}
    else
        # In non-interactive situations, we still expect the command to run.
        "$@"
    fi
}
