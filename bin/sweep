#!/ports/bin/perl
# -*- Mode: Perl; tab-width: 4; indent-tabs-mode: nil; -*-

use Modern::Perl;

use Config::Std;
use Net::Delicious;
use Readonly;
use WebService::Google::Reader;

Readonly my $STARRED_TAG   => 'starred';
Readonly my $SHARED_TAG    => 'broadcast';
Readonly my $NOTED_TAG     => 'created';
Readonly my $PROCESSED_TAG => 'swept';



my $config_file = shift
               // $ENV{'SWEEP_CONFIG'}
               // "$ENV{'HOME'}/etc/sweep.conf";
read_config $config_file => my %config;

my $reader = WebService::Google::Reader->new(
        username => $config{'reader'}{'username'},
        password => $config{'reader'}{'password'},
    );
my $reader_ns = XML::Atom::Namespace->new(
        gr =>'http://www.google.com/schemas/reader/atom/' 
    );
my $delicious = Net::Delicious->new( { 
        user => $config{'delicious'}{'username'},
        pswd => $config{'delicious'}{'password'},
    } );



my %noted    = get_new_noted_articles();
my %starred  = get_new_starred_articles();
my %shared   = get_new_shared_articles();
my %articles = ( %noted, %starred, %shared );

foreach my $id ( keys %articles ) {
    my $article = $articles{ $id };
    my $starred = defined $starred{ $id };
    my $shared  = defined $shared{ $id };
    my $noted   = defined $noted{ $id };
    
    my $textual_representation = "$id "
        . ( $starred ? '*' : '' )
        . ( $shared  ? '$' : '' )
        . ( $noted   ? '#' : '' )
        . "\n"
        . $article->title;
    
    # this means nothing to me (aah, vienna)
    if ( $starred && $shared && $noted ) {
        say "$textual_representation\n"
            . "Error: item flagged as starred, shared and has a note.";
    }
    
    # read this later
    elsif ( $starred && $shared ) {
        post_to_instapaper( $article->link->href );
        remove_flags( $article );
    }
    
    # bookmark, flagged for later review
    elsif ( $starred && $noted ) {
        bookmark_article( $article, 'action:review' );
        remove_flags( $article, $NOTED_TAG );
    }
    
    # bookmark, flagged to be published
    elsif ( $shared && $noted ) {
        bookmark_article( $article, 'action:publish' );
        remove_flags( $article );
    }
    
    # defer to later
    elsif ( $starred ) {
        # no action taken except in combination with another flag
    }
    
    # share with another service
    elsif ( $shared ) {
        # no action taken except in combination with another flag
    }
    
    # bookmark
    elsif ( $noted ) {
        bookmark_article( $article );
    }
    
    $reader->state_entry( $article, $PROCESSED_TAG );
}
exit;



sub bookmark_article {
    my $article    = shift;
    my @extra_tags = @_;
    
    my $url    = $article->link->href;
    my $author = $config{'reader'}{'author_name'};
    my $note   = $article->get( $reader_ns, 'annotation' ) // '';
       $note  =~ s{ [\.]? $author $}{}sx;
    
    my ( $text, @tags ) = parse_note_text( $note );
    post_to_delicious( $url, $text, @tags, @extra_tags );
}
sub parse_note_text {
    my $text = shift;
    my @tags;
    
    # strip tags from the end of the text
    if ( $text =~ s{ [Tt]ags [:]? \s* (.*?) [\.]? \s* $}{}sx ) {
        # delicious splits tags on spaces, not commas, so remove them
        @tags = split m{ [,]? \s+ }x, $1;
    }
    
    # Byline puts in <br> tags for linebreaks, which is just
    # dumb when it doesn't let you put in any other forms of
    # HTML styling making you think it's plain text instead
    $text =~ s{ [<]br[>] }{}gx;
    
    # compress whitespace
    $text =~ s{^ \s* (.*?) \s* $}{$1}sx;
    $text =~ s{ \s+ }{ }gsx;
    
    return( $text, @tags );
}


sub get_new_noted_articles {
    return get_articles( $NOTED_TAG );
}
sub get_new_starred_articles {
    return get_articles( $STARRED_TAG );
}
sub get_new_shared_articles {
    return get_articles( $SHARED_TAG );
}
sub get_articles {
    my $tag = shift;
    
    my $feed = $reader->state(
            $tag,
            count => 250,
            exclude => {
                state => $PROCESSED_TAG,
            },
        );
    
    my %entries;
    foreach my $entry ( $feed->entries ) {
        my $id = $entry->id;
        $entries{ $id } = $entry;
    }
    
    return %entries;
}
sub remove_flags {
    my $article = shift;
    my @tags    = @_;
    
    # remove all 'state' tags if no tag list given
    if ( $#tags == -1 ) {
        @tags = ( $STARRED_TAG, $SHARED_TAG, $NOTED_TAG );
    } 
    
    $reader->unstate_entry( $article, @tags );
}


sub post_to_instapaper {
    my $url = shift;
    
    my $ua       = LWP::UserAgent->new();
    my $response = $ua->post( 
            'https://www.instapaper.com/api/add',
            {
                username     => $config{'instapaper'}{'username'},
                password     => $config{'instapaper'}{'password'},
                url          => $url,
                'auto-title' => 1,
            },
        );
    
    if ( ! $response->is_success ) {
        die  "error posting to instapaper";
    }
}
sub post_to_delicious {
    my $url         = shift;
    my $description = shift;
    my @tags        = @_;
    
    my $worked = $delicious->add_post( {
            url         => $url,
            description => $description,
            tags        => join ' ', @tags,
        } );
    
    if ( ! $worked ) {
        die "error posting to delicious";
    }
}

__END__

=head1 NAME

B<sweep> - clean up items in Google Reader

=head1 RATIONALE

I also use Byline far, far more than I use Google Reader in a webpage. This
makes performing actions on items much harder. So I have this script to
perform actions for me, based upon the way I flag items.

There are three basic flags that can be applied to an item in Byline, so I 
have assigned a greater meaning to each. This means that by combining the
flags, I can actually achieve seven different actions.

=over

=item star

By starring (or favouriting) an item, I am marking it as something to deal
with later. This normally means something like "this is a file to download";
an action that needs to be done when at the main computer.

=item share

By marking an item as shared, I am declaring that it is to be shared with
other applications in some way. Alone, this setting is currently meaningless.

=item note

By adding a note to an item, I am saying that I want to bookmark it in
Delicious. The note is a description and any tags I want applied to the
bookmark.

=item star and share

This is both "deal with later" and "share", so the item is posted to
Instapaper for me to read later.

=item star and note

This is "deal with later" and "bookmark", so the item is bookmarked with an
extra tag "action:review".

=item share and note

This is "share" and "bookmark", so the item is bookmarked with an extra tag
"action:publish", which will trigger that item to appear as a Linked Item
in my blog.

=item star, share and note

This is "deal with later", "share" and "bookmark", This setting is currently
meaningless and reported as an error.

=back

Once an item has been seen by sweep, it is then tagged with the word "swept"
so that it is not processed again.

=head1 CONFIGURATION

A configuration file is required to store passwords for the web services this
script uses. It is by default located in C<$HOME/etc/sweep.conf>, but
this can be over-ridden by the environment variable C<SWEEP_CONFIG> or by
passing the config file as the first (and only) argument to the script.

The actions are currently defined in the code itself, not in the configuration
file.

An example configuration is as follows:

    # service details
    [reader]
    username    = norm@cackhanded.net
    password    = REDACTED
    author_name = Norm

    [instapaper]
    username = norm@cackhanded.net
    password = REDACTED

    [delicious]
    username = mn_francis
    password = REDACTED


=head1 AUTHOR

Mark Norman Francis, <norm@cackhanded.net>.
