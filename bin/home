#!/bin/sh
# github:bin/home
# -*- Mode: Bash; tab-width: 4; indent-tabs-mode: nil; -*-
#
#       Upload the 'home' files to another machine, based upon your 
#       checked out copy (rather than the current homedir).

function usage_and_exit {
    script=`basename $0`
    cat 1>&2 <<END
Usage: $script [-k] [-f file] [-s dir] host

Run "perldoc $script" for more detail.
END
    exit 1
}

just_ssh_keys=0
    keys_file="${SSH_AUTHORIZED_KEYS:=${HOME}/.ssh/authorized_keys}"
     skeleton="${HOME_REPOSITORY:=${HOME}/Projects/home}"
      use_scp=0

while getopts "f:hks" option; do
    case $option in
        f)  keys_file="$OPTARG"     ;;
        h)  usage_and_exit          ;;
        k)  just_ssh_keys=1         ;;
        s)  skeleton="$OPTARG"      ;;
    esac
done
shift $(( OPTIND -1 ))

host="$1"
[ -n "$host" ] \
    || usage_and_exit

# will this work?
cat $keys_file \
    | ssh $host "mkdir -p .ssh ; cat > .ssh/authorized_keys"

if [ $just_ssh_keys -ne 1 ]; then
    cd $skeleton \
        || exit 1
    
    git pull
    rsync -avHP . ${host}:.
    
    # if that fails:
    # scp -R . $host
fi

echo $host

exit

<<POD

=head1 HOME

B<home> - upload the home directory settings to another machine

=head1 SYNOPSIS

B<home> [B<-h>] [B<-k>] [B<-s> F<dir>] [B<-f> F<file>] F<hostname>

=head1 OPTIONS

=over

=item B<-h>

Print brief usage information and exit.

=item B<-k>

Upload B<only> the SSH F<authorized_keys> file.

=item B<-s> F<dir>

Use F<dir> as the directory containing the home directory files (or
'skeleton'). Can also be passed via the environment in C<HOME_REPOSITORY>.
Defaults to F<~/Projects/home>.

=item B<-f> F<file>

Use F<file> as the SSH authorized_keys file. Can also be passed via the 
environment in C<SSH_AUTHORIZED_KEYS>. Defaults to F<~/.ssh/authorized_keys>.

=back

=cut

POD
